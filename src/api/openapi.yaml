openapi: 3.0.0
info:
  title: Sistema de Reservas para Restaurantes
  description: API para gerenciamento de reservas, restaurantes, clientes e mesas
  version: 1.0.0
  contact:
    name: Suporte Técnico
    email: support@restaurantapi.com

servers:
  - url: http://localhost:3000
    description: Servidor de Desenvolvimento

components:
  schemas:
    Restaurante:
      type: object
      required:
        - nome
        - endereco
        - horarioFuncionamento
        - quantidadeMesas
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        nome:
          type: string
          example: "Restaurante Exemplo"
        endereco:
          type: string
          example: "Rua Principal, 123"
        horarioFuncionamento:
          type: string
          example: "10:00-22:00"
        quantidadeMesas:
          type: integer
          minimum: 1
          example: 20

    Cliente:
      type: object
      required:
        - nome
        - email
        - telefone
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        nome:
          type: string
          example: "João Silva"
        email:
          type: string
          format: email
          example: "joao@email.com"
        telefone:
          type: string
          example: "11999999999"

    Reserva:
      type: object
      required:
        - idCliente
        - idRestaurante
        - dataHora
        - numeroPessoas
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        idCliente:
          type: integer
          format: int64
        idRestaurante:
          type: integer
          format: int64
        dataHora:
          type: string
          format: date-time
        numeroPessoas:
          type: integer
          minimum: 1
        status:
          type: string
          enum: [Confirmada, Pendente, Cancelada]
          default: Confirmada

    Mesa:
      type: object
      required:
        - idRestaurante
        - numero
        - capacidade
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        idRestaurante:
          type: integer
          format: int64
        numero:
          type: integer
        capacidade:
          type: integer
          minimum: 1
        status:
          type: string
          enum: [Livre, Reservada, Ocupada]
          default: Livre

    Funcionario:
      type: object
      required:
        - idRestaurante
        - nome
        - cargo
        - horarioTrabalho
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        idRestaurante:
          type: integer
          format: int64
        nome:
          type: string
        cargo:
          type: string
        horarioTrabalho:
          type: string

    Pagamento:
      type: object
      required:
        - idReserva
        - valorTotal
        - formaPagamento
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        idReserva:
          type: integer
          format: int64
        valorTotal:
          type: number
          format: double
        formaPagamento:
          type: string
          enum: [Cartão de Crédito, Dinheiro, Transferência]
        statusPagamento:
          type: string
          enum: [Pendente, Pago, Cancelado]
          default: Pendente

  responses:
    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Recurso não encontrado"

    BadRequest:
      description: Requisição inválida
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dados inválidos na requisição"

paths:
  /api/restaurantes:
    post:
      summary: Criar um novo restaurante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurante'
      responses:
        '201':
          description: Restaurante criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurante'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: Obter todos os restaurantes
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número da página
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Quantidade de itens por página
      responses:
        '200':
          description: Lista de restaurantes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurante'

  /api/restaurantes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID do restaurante
    
    get:
      summary: Obter um restaurante específico
      responses:
        '200':
          description: Restaurante encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurante'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Atualizar um restaurante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurante'
      responses:
        '200':
          description: Restaurante atualizado com sucesso
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      summary: Remover um restaurante
      responses:
        '204':
          description: Restaurante removido com sucesso
        '404':
          $ref: '#/components/responses/NotFound'

  /api/clientes:
    post:
      summary: Criar um novo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
      responses:
        '201':
          description: Cliente criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: Obter todos os clientes
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número da página
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Quantidade de itens por página
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'

  /api/reservas:
    post:
      summary: Criar uma nova reserva
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reserva'
      responses:
        '201':
          description: Reserva criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserva'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: Obter todas as reservas
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Confirmada, Pendente, Cancelada]
          description: Filtrar por status da reserva
      responses:
        '200':
          description: Lista de reservas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'

  /api/mesas:
    post:
      summary: Criar uma nova mesa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mesa'
      responses:
        '201':
          description: Mesa criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mesa'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/pagamentos:
    post:
      summary: Registrar um novo pagamento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pagamento'
      responses:
        '201':
          description: Pagamento registrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagamento'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: Obter todos os pagamentos
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Pendente, Pago, Cancelado]
          description: Filtrar por status do pagamento
      responses:
        '200':
          description: Lista de pagamentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pagamento'